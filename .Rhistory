}
for(ip in 1:n_plants){
temp <- try(integrate(min.f1f2, -Inf, Inf, mu1=p_traitM[ip], mu2=a_traitM[ia], sd1=p_traitV[ip], sd2=a_traitV[ia])$value) #Integrate our minimum equation over all numbers; output is the total area overlapping both curves, with max value of perfectly overlapping curves as 1
if(class(temp)=='try-error'){
int_fail <- TRUE
break()
}
alpha[ia, ip] <- temp
print(temp)
#print(paste("ia=", ia, "; ip=", ip, sep=""))
}
}
for(ip in 1:n_plants){
temp <- try(integrate(min.f1f2, -Inf, Inf, mu1=p_traitM[ip], mu2=a_traitM[ia], sd1=p_traitV[ip], sd2=a_traitV[ia])$value) #Integrate our minimum equation over all numbers; output is the total area overlapping both curves, with max value of perfectly overlapping curves as 1
if(class(temp)=='try-error'){
int_fail <- TRUE
break()
}
alpha[ia, ip] <- temp
print(temp)
#print(paste("ia=", ia, "; ip=", ip, sep=""))
}
int_fail
int_fail <- FALSE
#if so, recalculate niche overlap and competition matrices
#print("recalculating")
alpha <- matrix(nrow=n_animals, ncol=n_plants) #Create an empty matrix for plant-pollinator partnerships
for(ia in 1:n_animals){
if(int_fail==TRUE){ #If we've come across an integration failure, break the loop
break()
}
for(ip in 1:n_plants){
temp <- try(integrate(min.f1f2, -Inf, Inf, mu1=p_traitM[ip], mu2=a_traitM[ia], sd1=p_traitV[ip], sd2=a_traitV[ia])$value) #Integrate our minimum equation over all numbers; output is the total area overlapping both curves, with max value of perfectly overlapping curves as 1
if(class(temp)=='try-error'){
int_fail <- TRUE
break()
}
alpha[ia, ip] <- temp
print(temp)
#print(paste("ia=", ia, "; ip=", ip, sep=""))
}
}
alpha[alpha<0.05] <- 0
u <- matrix(data=NA, nrow=n_plants, ncol=n_plants)
for(p1 in 1:n_plants){
if(int_fail==TRUE){ #If we've come across an integration failure, break the loop
break()
}
for(p2 in 1:n_plants){
temp <- integrate(min.f1f2, -Inf, Inf, mu1=p_traitM[p1], mu2=p_traitM[p2], sd1=p_traitV[p1], sd2=p_traitV[p2])$value #Integrate our minimum equation over all numbers; output is the total area overlapping both curves, with max value of perfectly overlapping curves as 1
if(class(temp)=='try-error'){
int_fail <- TRUE
break()
}
u[p1, p2] <- temp
}
}
u
o <- matrix(data=NA, nrow=n_animals, ncol=n_animals) #Now, let's look at animal competition
for(ia in 1:n_animals){
if(int_fail==TRUE){ #If we've come across an integration failure, break the loop
break()
}
for(a2 in 1:n_animals){
temp <- try(integrate(min.f1f2, -Inf, Inf, mu1=a_traitM[a2], mu2=a_traitM[ia], sd1=a_traitV[a2], sd2=a_traitV[ia])$value) #Integrate our minimum equation over all numbers; output is the total area overlapping both curves, with max value of perfectly overlapping curves as 1
if(class(temp)=='try-error'){
int_fail <- TRUE
break()
}
o[ia, a2]<- temp
#print(paste("ia=", ia, "; ip=", ip, sep=""))
}
}
o
#Find out dpop/dt
a_change <- matrix(data=NA, nrow=nsites, ncol=n_animals)
for(n in 1:n_animals){
propOfplants <- 0
nums <- alpha[n,]*p_pops#[,site]
for(i in 1:n_plants){
#Numerator-plant reward given by each focal pollinator
propOfplants <- propOfplants+nums[,i]/(r+sum(alpha[,i]*a_pops)) #Denominator-scaled by total available pollen
}
pollDeath <- mua
#print(propOfplants)
a_change[,n] <- lambda*((1-(o[,n]%*%t(a_pops))/K))*propOfplants# - pollDeath
} #Animal Growth Rate
a_change
#Find out dpop/dt
a_change <- matrix(data=NA, nrow=nsites, ncol=n_animals)
a_change
for(n in 1:n_animals){
propOfplants <- 0
nums <- alpha[n,]*p_pops#[,site]
for(i in 1:n_plants){
#Numerator-plant reward given by each focal pollinator
propOfplants <- propOfplants+nums[,i]/(r+sum(alpha[,i]*a_pops)) #Denominator-scaled by total available pollen
}
pollDeath <- mua
#print(propOfplants)
a_change[,n] <- lambda*((1-(o[,n]%*%t(a_pops))/K))*propOfplants# - pollDeath
} #Animal Growth Rate
disptype = "negativeComp"; n_plants = 5; n_animals = 5; dexpsim = dexpsim; r = 0.5; mup = 0.1; mua = 0.05; o = 0.1; lambda = log(1.5); K = 1000; e_thresh = 2; invade_size = 5; disprobmax = 0.2; num_timeSteps = 2000; invProb = 0.1
#Find out dpop/dt
a_change <- matrix(data=NA, nrow=nsites, ncol=n_animals)
for(n in 1:n_animals){
propOfplants <- 0
nums <- alpha[n,]*p_pops#[,site]
for(i in 1:n_plants){
#Numerator-plant reward given by each focal pollinator
propOfplants <- propOfplants+nums[,i]/(r+sum(alpha[,i]*a_pops)) #Denominator-scaled by total available pollen
}
pollDeath <- mua
#print(propOfplants)
a_change[,n] <- lambda*((1-(o[,n]%*%t(a_pops))/K))*propOfplants# - pollDeath
} #Animal Growth Rate
a_change
n <- 1
propOfplants <- 0
nums <- alpha[n,]*p_pops#[,site]
nums
for(i in 1:n_plants){
#Numerator-plant reward given by each focal pollinator
propOfplants <- propOfplants+nums[,i]/(r+sum(alpha[,i]*a_pops)) #Denominator-scaled by total available pollen
}
pollDeath <- mua
#print(propOfplants)
a_change[,n] <- lambda*((1-(o[,n]%*%t(a_pops))/K))*propOfplants# - pollDeath
a_change
lambda
o[,n]
o
o
o <- matrix(data=NA, nrow=n_animals, ncol=n_animals) #Now, let's look at animal competition
for(ia in 1:n_animals){
if(int_fail==TRUE){ #If we've come across an integration failure, break the loop
break()
}
for(a2 in 1:n_animals){
temp <- try(integrate(min.f1f2, -Inf, Inf, mu1=a_traitM[a2], mu2=a_traitM[ia], sd1=a_traitV[a2], sd2=a_traitV[ia])$value) #Integrate our minimum equation over all numbers; output is the total area overlapping both curves, with max value of perfectly overlapping curves as 1
if(class(temp)=='try-error'){
int_fail <- TRUE
break()
}
o[ia, a2]<- temp
#print(paste("ia=", ia, "; ip=", ip, sep=""))
}
}
o
#Find out dpop/dt
a_change <- matrix(data=NA, nrow=nsites, ncol=n_animals)
for(n in 1:n_animals){
propOfplants <- 0
nums <- alpha[n,]*p_pops#[,site]
for(i in 1:n_plants){
#Numerator-plant reward given by each focal pollinator
propOfplants <- propOfplants+nums[,i]/(r+sum(alpha[,i]*a_pops)) #Denominator-scaled by total available pollen
}
pollDeath <- mua
#print(propOfplants)
a_change[,n] <- lambda*((1-(o[,n]%*%t(a_pops))/K))*propOfplants# - pollDeath
} #Animal Growth Rate
a_change
o[,n]
lambda*((1-(o[,n]%*%t(a_pops))/K))
o
o[,1]
a_pops
t(a_pops)
#print(propOfplants)
a_change[,n] <- lambda*((1-(o[,n]%*%(a_pops))/K))*propOfplants# - pollDeath
a_change
lambda
lambda*((1-(o[,n]%*%(a_pops))/K))*propOfplants
lambda*((1-(o[,n]%*%(a_pops))/K))
#print(propOfplants)
a_change[,n] <- lambda*((1-(o[,n]%*%t(a_pops))/K))*propOfplants# - pollDeath
lambda*((1-(o[,n]%*%t(a_pops))/K))
lambda*((1-(o[,n]%*%t(a_pops))/K))
lambda*((1-(o[,n]%*%t(a_pops))/K))
lambda*((1-(o[,n]%*%t(a_pops))/K))
lambda*((1-(o[,n]%*%t(a_pops))/K))
lambda*((1-(o[,n]%*%t(a_pops))/K))
lambda*((1-(o[,n]%*%t(a_pops))/K))
o[,n]%*%t(a_pops))
a_pops
o[,n]
o
a_pops
v
a_pops
a_pops <- a_pops[,3:7]
p_pops <- p_pops[,3:7]
#Find out dpop/dt
a_change <- matrix(data=NA, nrow=nsites, ncol=n_animals)
for(n in 1:n_animals){
propOfplants <- 0
nums <- (p_pops %*%diag(alpha[n,]))*a_pops[,n]#Diag is important here; this essentially does column-wise multiplication
#Valdevinos: plants need to be in both
for(i in 1:n_plants){
#Numerator-plant reward given by each focal pollinator
propOfplants <- propOfplants+nums[,i]/(r+rowSums(a_pops %*% diag(alpha[,i]))*p_pops[,i]) #Denominator-scaled by total available pollen
}
#print(propOfplants)
pollDeath <- mua
#print(propOfplants)
a_change[,n] <- lambda*((1-(o[,n]%*%t(a_pops))/K))*propOfplants# - pollDeath
} #Animal Growth Rate
a_change
exp(a_change)
p_change <- matrix(data=NA, nrow=nsites, ncol=n_plants)
for(n in 1:n_plants){
plantCompetition <- (K-rowSums(t(u[n,]*t(p_pops))))/K#(K-sum(u[n,]*p_pops[n,]))/K
#pollBenefits <-sum(alpha[,n]*a_pops*p_pops[n])/(r+sum(alpha[,n]*a_pops)) #NOTE: THIS IS MORE SIMILIAR TO BECKER. NOt sure why their p_pop is included here.
pollBenefits <-rowSums(t(alpha[,n]*t(a_pops)))/(r+rowSums(t(alpha[,n]*t(a_pops))))
plantDeath <- mup
p_change[,n] <- r*plantCompetition*pollBenefits# - plantDeath# + o*rnorm(n=1, mean=0, sd=0.1)
}
p_change
a_pops
#Project to t+1
for(i in 1:(n_plants*nsites)){
#p_pops[i] <- sum(rpois(n=round(p_pops[i]),lambda = 1+p_change[i])) #Poisson birth process for plants
p_pops[i] <- sum(rpois(n=round(p_pops[i]),lambda = exp(p_change[i])))
#browser()
#p_pops[i] <- temp
}
#p_pops <- p_pops*(1+p_change)
#a_pops <- (a_change+1)*a_pops #Update Animal population
for(i in 1:(n_animals*nsites)){
#a_pops[i] <- sum(rpois(n=round(a_pops[i]),lambda = 1+a_change[i])) #Poisson birth process for animals
a_pops[i] <- sum(rpois(n=round(a_pops[i]), lambda = exp(a_change[i])))
}
a_pops
a_pops
#a_pops <- (a_change+1)*a_pops #Update Animal population
for(i in 1:(n_animals*nsites)){
#a_pops[i] <- sum(rpois(n=round(a_pops[i]),lambda = 1+a_change[i])) #Poisson birth process for animals
a_pops[i] <- sum(rpois(n=round(a_pops[i]), lambda = exp(a_change[i])))
}
a_pops
if(disptype=="positiveComp"){
a_disprobs <- disprobmax*exp(a_change)/2
}
if(disptype=="negativeComp"){#Dispersal probability is inversely proportional to local growth rate
a_disprobs <- 1-disprobmax*exp(a_change)/2
}
if(disptype=="neutralComp"){
a_disprobs <- disprobmax/2 #Note: this creates a single scalar, rather than a matrix. Should work the same in the dispersal operation below, but just something to keep track of.
}
a_disprobs[a_disprobs<0] <- 0 #Species that more than double have their dispersal prob set to 0
a_disprobs[a_disprobs>disprobmax] <- disprobmax #Species that really do poorly can't have a dispersal probability above disprobmax
#Dispersal (occurs after demographics for year)
#Decide number of animal dispersers from each site of each species
a_emms <- matrix(rbinom(n=length(a_pops), size=a_pops, prob=a_disprobs), nrow=nsites)
a_pops <- a_pops-a_emms #Remove our immigrants from our pops for now so we don't count them redundantly
a_pops
#animals disperse across sites
for(site in 1:nsites){
for(spp in 1:n_animals){
destin <- sample(factor_sites, size=a_emms[site, spp], replace=TRUE, prob=dexpsim[site,]/sum(dexpsim[site,])) #Sample our sites a number of times equal to the emmigrants from a particular site.
a_pops[,spp] <- a_pops[,spp] + as.matrix(table(destin), ncol=1) #Table summarizes how many immigrants go to each site and then we add them to the population size.
}
}
p_disprobs <- disprobmax/2 #Plant dispersal probability is always a constant (can't realistically modify their behavior based on local conditions; changes in numerical response should already be reflected in growth rate)
#Now our plants can disperse
p_emms <- matrix(rbinom(n=length(p_pops), size=p_pops, prob=p_disprobs), nrow=nsites)
p_pops <- p_pops-p_emms #Remove our immigrants from our pops for now so we don't count them redundantly
#plants disperse across sites
for(site in 1:nsites){
for(spp in 1:n_plants){
#browser()
destin <- sample(factor_sites, size=p_emms[site, spp], replace=TRUE, prob=dexpsim[site,]/sum(dexpsim[site,])) #Sample our sites a number of times equal to the emmigrants from a particular site.
p_pops[,spp] <- p_pops[,spp] + as.matrix(table(destin), ncol=1) #Table summarizes how many immigrants go to each site and then we add them to the population size.
#print(paste("site=", site, "; spp=", spp, sep=""))
}
}
p_pops
runSimulation()
set.seed(2)
v <- runSimulation()
v
p_pops <- v$plants[1:5,3:7]
a_pops <- v$animals[1:5,3:7]
a_traitM
alpha
#Find out dpop/dt
a_change <- matrix(data=NA, nrow=nsites, ncol=n_animals)
for(n in 1:n_animals){
propOfplants <- 0
nums <- alpha[n,]*p_pops#[,site]
for(i in 1:n_plants){
#Numerator-plant reward given by each focal pollinator
propOfplants <- propOfplants+nums[,i]/(r+sum(alpha[,i]*a_pops)) #Denominator-scaled by total available pollen
}
pollDeath <- mua
#print(propOfplants)
a_change[,n] <- lambda*((1-(o[,n]%*%t(a_pops))/K))*propOfplants# - pollDeath
} #Animal Growth Rate
a_change
nums
alpha
p_pops
alpha[n,]*p_pops
alpha
alpha[n,]*p_pops
nums <- alpha[n,]%*%p_pops#[,site]
nums
nums <- alpha[n,]%*%t(p_pops)#[,site]
nums
nums <- alpha[n,]*diag(p_pops)#[,site]
nums
nums <- alpha[n,]%*%diag(p_pops)#[,site]
nums
nums <- alpha[n,]*p_pops#[,site]
nums
alpha
nums
n
propOfplants
a_change
a_change
lambda
1-(o[,n]%*%t(a_pops))/K
propOfplants
propOfplants
propOfplants
propOfplants
nums[,i]
r+sum(alpha[,i]*a_pops)
nums[,i]/(r+sum(alpha[,i]*a_pops))
propOfplants
#Find out dpop/dt
a_change <- matrix(data=NA, nrow=nsites, ncol=n_animals)
for(n in 1:n_animals){
propOfplants <- 0
nums <- alpha[n,]*p_pops#[,site]
for(i in 1:n_plants){
#Numerator-plant reward given by each focal pollinator
propOfplants <- propOfplants+nums[,i]/(r+sum(alpha[,i]*a_pops)) #Denominator-scaled by total available pollen
}
pollDeath <- mua
#print(propOfplants)
a_change[,n] <- lambda*((1-(o[,n]%*%t(a_pops))/K))#*propOfplants# - pollDeath
} #Animal Growth Rate
a_change
a_change <- matrix(data=NA, nrow=nsites, ncol=n_animals)
for(n in 1:n_animals){
propOfplants <- 0
nums <- alpha[n,]*p_pops#[,site]
for(i in 1:n_plants){
#Numerator-plant reward given by each focal pollinator
propOfplants <- propOfplants+nums[,i]/(r+sum(alpha[,i]*a_pops)) #Denominator-scaled by total available pollen
}
pollDeath <- mua
#print(propOfplants)
a_change[,n] <- lambda*((1-(o[,n]%*%t(a_pops))/K))#*propOfplants# - pollDeath
} #Animal Growth Rate
a_change
#Find out dpop/dt
a_change <- matrix(data=NA, nrow=nsites, ncol=n_animals)
for(n in 1:n_animals){
propOfplants <- 0
nums <- alpha[n,]*p_pops#[,site]
for(i in 1:n_plants){
#Numerator-plant reward given by each focal pollinator
propOfplants <- propOfplants+nums[,i]/(r+sum(alpha[,i]*a_pops)) #Denominator-scaled by total available pollen
}
pollDeath <- mua
#print(propOfplants)
a_change[,n] <- lambda*((1-(o[,n]%*%t(a_pops))/K))*propOfplants# - pollDeath
} #Animal Growth Rate
a_change
r+sum(alpha[,i]*a_pops)
alpha
alpha[,i]*a_pops
(r+sum(alpha[,i]*a_pops))
nums[,i]
alpha[,i]*a_pops)
r+sum(alpha[,i]*a_pops)
(alpha[,i]*a_pops
)
alpha\
alpha
alpha[,1]
alpha[,2]
alpha[,2]*a_pops
nums <- alpha[n,]#*p_pops#[,site]
for(i in 1:n_plants){
#Numerator-plant reward given by each focal pollinator
propOfplants <- propOfplants+nums[,i]/(r+sum(alpha[,i]*a_pops)) #Denominator-scaled by total available pollen
}
propOfplants
#Find out dpop/dt
a_change <- matrix(data=NA, nrow=nsites, ncol=n_animals)
for(n in 1:n_animals){
propOfplants <- 0
nums <- alpha[n,]#*p_pops#[,site]
for(i in 1:n_plants){
#Numerator-plant reward given by each focal pollinator
propOfplants <- propOfplants+nums[,i]/(r+sum(alpha[,i]*a_pops)) #Denominator-scaled by total available pollen
}
pollDeath <- mua
#print(propOfplants)
a_change[,n] <- lambda*((1-(o[,n]%*%t(a_pops))/K))*propOfplants# - pollDeath
} #Animal Growth Rate
alpha[n,]
nums
a_change
lambda*((1-(o[,n]%*%t(a_pops))/K))*propOfplants#
a_change <- matrix(data=NA, nrow=nsites, ncol=n_animals)
for(n in 1:n_animals){
propOfplants <- 0
nums <- alpha[n,]#*p_pops#[,site]
for(i in 1:n_plants){
#Numerator-plant reward given by each focal pollinator
propOfplants <- propOfplants+nums[,i]/(r+sum(alpha[,i]*a_pops)) #Denominator-scaled by total available pollen
}
pollDeath <- mua
#print(propOfplants)
a_change[,n] <- lambda*((1-(o[,n]%*%t(a_pops))/K))*propOfplants# - pollDeath
} #Animal Growth Rate
nums[,i]
for(n in 1:n_animals){
propOfplants <- 0
nums <- alpha[n,]*p_pops#[,site]
for(i in 1:n_plants){
#Numerator-plant reward given by each focal pollinator
propOfplants <- propOfplants+nums[,i]/(r+sum(alpha[,i]*a_pops)) #Denominator-scaled by total available pollen
}
pollDeath <- mua
#print(propOfplants)
a_change[,n] <- lambda*((1-(o[,n]%*%t(a_pops))/K))*propOfplants# - pollDeath
} #Animal Growth Rate
#Find out dpop/dt
a_change <- matrix(data=NA, nrow=nsites, ncol=n_animals)
for(n in 1:n_animals){
propOfplants <- 0
nums <- alpha[n,]*p_pops#[,site]
for(i in 1:n_plants){
#Numerator-plant reward given by each focal pollinator
propOfplants <- propOfplants+nums[,i]/(r+sum(alpha[,i]*a_pops)) #Denominator-scaled by total available pollen
}
pollDeath <- mua
#print(propOfplants)
a_change[,n] <- lambda*((1-(o[,n]%*%t(a_pops))/K))*propOfplants# - pollDeath
} #Animal Growth Rate
nums <- alpha[n,]*p_pops#[,site]
nums <- alpha[n,]*p_pops/K#[,site]
nums
#Find out dpop/dt
a_change <- matrix(data=NA, nrow=nsites, ncol=n_animals)
for(n in 1:n_animals){
propOfplants <- 0
nums <- alpha[n,]*p_pops/K#[,site]
for(i in 1:n_plants){
#Numerator-plant reward given by each focal pollinator
propOfplants <- propOfplants+nums[,i]/(r+sum(alpha[,i]*a_pops)) #Denominator-scaled by total available pollen
}
pollDeath <- mua
#print(propOfplants)
a_change[,n] <- lambda*((1-(o[,n]%*%t(a_pops))/K))*propOfplants# - pollDeath
} #Animal Growth Rate
a_change
set.seed(2)
v <- runSimulation()
v
p_pops <- v$plants[1:5,3:7]
a_pops <- v$animals[1:5,3:7]
a_traitM
save(list_results, file="simulationNegative.Rda")
source(file="./DispersalSimulationAnComp.R") #load in our dispersal simulation function. rOxygen-style description available in file.
set.seed(2)
v <- runSimulation()
v
p_pops <- v$plants[1:5,3:7]
a_pops <- v$animals[1:5,3:7]
a_traitM
View(p_pops)
v
plan <- v$plants
View(plan)
tictoc::tic()
#num_iterations <- 100
num_iterations <- 4
# Set up the cluster for parallelization
cl <- makeCluster(detectCores()-2, outfile="")
# Define a function to run the simulation
runSimulation <- function() {
x <- try(runDispersalSim(nsites = nsites, disptype = "negativeComp", n_plants = 5, n_animals = 5, dexpsim = dexpsim, r = 0.5, mup = 0.1, mua = 0.1, o = 0.1, lambda = 0.9, K = 100, e_thresh = 2, invade_size = 5, disprobmax = 0.2, num_timeSteps = 100, invProb = 0.1))
return(x)
}
clusterExport(cl, c("nsites", "runSimulation", "runDispersalSim", "dexpsim"))
# Run the simulations in parallel
list_results <- clusterApplyLB(cl, 1:num_iterations, function(i) {
runSimulation()
})
# Stop the cluster
stopCluster(cl)
time1 <- tictoc::toc()
list_results
list_results[[1]]$plants
list_results[[2]]$plants
list_results[[3]]$plants
list_results[[4]]$plants
list_results[[5]]$plants
setwd("~/Documents/Website_Devs.nosync/Website_Devs.nosync/PoisonSite")
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
